#Main Code for the Fourier Transform of Pulsar Data Project
import numpy as np
import matplotlib.pyplot as plt
import pandas as pd

def compute_fourier(x_data, N_total, sample_interval=0.004):
    """
    Compute the Fourier transform of the given data using the method from project notes. Note outputs arrays of frequencies and power as well as A_k and B_k.
    """

    # Initialize arrays
    A_k = np.zeros(N_total)
    B_k = np.zeros(N_total)
    power = np.zeros(N_total)


    # Computes for all k values
    for k in range(1, N_total):
        #Sets the angle theta and initializes U_n
        theta = 2 * np.pi * k / N_total
        cos_theta = np.cos(theta)
        sin_theta = np.sin(theta)

        U_n = np.zeros(N_total + 2)


        #generates the current U_n value
        for current_n in range(N_total - 1, -1, -1):
            U_n[current_n] = x_data[current_n] + 2 * cos_theta * U_n[current_n + 1] - U_n[current_n + 2]


        #ues the U_n value and trig functions to calculate the A_k and B_k values
        A_k[k] = (U_n[0] - U_n[1] * cos_theta) / N_total
        B_k[k] = (U_n[1] * sin_theta) / N_total

        #computes the power 
        power[k] = A_k[k]**2 + B_k[k]**2
    
    return power, A_k, B_k



def load_pulsar_data(filepath="PULSAR.DAT"):
    """Load the pulsar data from the ASCII file."""
    try:
        data = np.loadtxt(filepath)
        return data
    except Exception as e:
        print(f"Error loading data: {e}")
        # Create synthetic data if file not found for testing
        return np.zeros(256)
    
def gen_synthetic_data(N_total=256, freq1=1200, freq2=1300, amp1=700, amp2=500, time_step=0.004,noise_level=100,background=2220):
        
    time_array = np.linspace(0, N_total * time_step, N_total)

    intensity_array = np.zeros(N_total)

    
    # Convert Hz to angular frequency
    angular_freq1 = 2 * np.pi * freq1
    angular_freq2 = 2 * np.pi * freq2
    

    # Generate synthetic data
    for i in range(N_total):
        intensity_array[i] = np.absolute(amp1 * np.sin(angular_freq1 * time_array[i]) + amp2 * np.cos(angular_freq2 * time_array[i]))
        intensity_array[i] += np.random.normal(background)
        intensity_array[i] += noise_level * np.random.normal()
    
    return time_array , intensity_array

def plot_data(time, y_axis, title="Pulsar Data", xlabel="Time (s)", ylabel="Intensity"):
    plt.plot(time, y_axis)
    plt.title(title)
    plt.xlabel(xlabel)
    plt.ylabel(ylabel)
    plt.legend()


time_array, intensity_array = gen_synthetic_data()
power = load_pulsar_data()
plot_data(time_array, intensity_array)
plot_data(time_array, power, title="Fourier Transform of Pulsar Data", xlabel="Frequency (Hz)", ylabel="Power")
plt.show()

print("intensity_array", intensity_array)

