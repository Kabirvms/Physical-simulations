import numpy as np
import matplotlib.pyplot as plt

import numpy as np

def gen_synthetic_data(N_total=256, time_step=0.001):
    """
    Generates synthetic pulsar data with two frequencies, amplitudes, background, and noise.
    Parameters are based on observed properties of PSR B1937+21 and PSR J0437−4715.
    """

    # Frequencies in Hz:
    # PSR J0437−4715: 173.7 Hz (5.75 ms period)
    # PSR B1937+21: 642 Hz (1.557 ms period)
    freq1 = 173.7  # PSR J0437−4715
    freq2 = 642.0  # PSR B1937+21

    # Amplitudes (relative units):
    # PSR J0437−4715 has a mean flux density of ~150 mJy at 1.4 GHz
    # PSR B1937+21 has a mean flux density of ~20 mJy at 1.4 GHz
    amp1 = 1.0   # PSR J0437−4715
    amp2 = 0.13  # PSR B1937+21 (20 mJy / 150 mJy ≈ 0.13)

    # Background noise level (mean and standard deviation):
    # System temperature T_sys ≈ 20 K with standard deviation ≈ 2 K at 1.4 GHz
    background_mean = 20.0  # K
    background_std = 2.0    # K

    # Generate time array
    time_array = np.linspace(0, N_total * time_step, N_total)

    # Generate intensity array
    intensity_array = np.zeros(N_total)

    # Generate the two angular frequencies
    angular_freq1 = 2 * np.pi * freq1
    angular_freq2 = 2 * np.pi * freq2

    # Generate the intensity array with noise and background
    for i in range(N_total):
        signal = (
            amp1 * np.sin(angular_freq1 * time_array[i]) +
            amp2 * np.cos(angular_freq2 * time_array[i])
        )
        noise = np.random.normal(0, 1)  # Standard normal noise
        background = np.random.normal(background_mean, background_std)
        intensity_array[i] = np.abs(signal) + noise + background

    return intensity_array, time_array

intensity_array, time_array = gen_synthetic_data(N_total=256, time_step=0.004)

plt.plot(time_array, intensity_array)
plt.title('Synthetic Pulsar Data')
plt.xlabel('Time (s)')
plt.ylabel('Intensity')
plt.show()
